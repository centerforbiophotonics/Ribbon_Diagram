:javascript
  var outside_data = null;

  function RibbonFilter(data){
    this.data = data;
    this.filter = {};
    this.filter_types = {};
    this.filter_names = {};

    //Initialization Tasks
    this.build_filter_menu();
    this.update_filter_hash();
  }

  RibbonFilter.prototype = {
    build_filter_menu: function(){
      var first_time = true;

      var filter = this.filter;
      var filter_types = this.filter_types;
      var filter_names = this.filter_names;

      this.data["STUDENTS"].forEach(function(student){
        var demographics = student["DEMOGRAPHICS"];

        if (first_time){
          first_time = false;

          for (var key in demographics){
            var safe_key = css_safe(key);
            filter_names[safe_key] = key;
            if (typeof demographics[key] == "string"){
              filter[safe_key] = [demographics[key]];
              filter_types[safe_key] = "string";
            } else if (typeof demographics[key] == "boolean"){
              filter[safe_key] = "Included";
              filter_types[safe_key] = "boolean";
            } else if (typeof demographics[key] == "number"){
              filter[safe_key] = [demographics[key],demographics[key]];
              filter_types[safe_key] = "number";
            } else if (demographics[key] == null) {
              demographics[key] = "Not Specified";  // Rare problem here if the value in the first record is null and then not null in any other record.
              filter[safe_key] = null;
            }
          }
        } else {
          for (var key in demographics){
            var safe_key = css_safe(key);
            if (typeof demographics[key] == "string" && (filter[safe_key] == null || filter[safe_key].indexOf(demographics[key]) == -1) ){
              if (filter[safe_key] == null) filter[safe_key] = [];
              filter[safe_key].push(demographics[key]);
            } else if (typeof demographics[key] == "number"){
              if (filter[safe_key] == null) filter[safe_key] = [demographics[key],demographics[key]];

              if (parseFloat(demographics[key]) < parseFloat(filter[safe_key][0]))
                filter[safe_key][0] = parseFloat(demographics[key]);

              if (parseFloat(demographics[key]) > parseFloat(filter[safe_key][1]))
                filter[safe_key][1] = parseFloat(demographics[key]);
            } else if (typeof demographics[key] == "boolean"){
              if (filter[safe_key] == null) filter[safe_key] = "Included";
            } else if (demographics[key] == null){
              if (filter[safe_key] == null) filter[safe_key] = [demographics[key],demographics[key]];

              demographics[key] = "Not Specified";
              if (filter_types[safe_key] == "string" && filter[safe_key].indexOf("Not Specified") == -1)
                filter[safe_key].push(demographics[key]);
            }
          }
        }
      });

      for (var safe_key in filter){
        var key = this.filter_names[safe_key];
        if (filter_types[safe_key] == "string"){
          this.generate_string_menu_item(key, safe_key, filter[safe_key]);
        } else if (filter_types[safe_key] == "boolean"){
          this.generate_boolean_menu_item(key, safe_key, filter[safe_key]);
        } else if (filter_types[safe_key] == "number"){
          this.generate_numeric_menu_item(key, safe_key, filter[safe_key]);
        }
      }
    },

    generate_string_menu_item : function(key, safe_key, values){
      var html_string = '<div class="filter-form-item">\n'+
        '<label for="'+safe_key+'" class="filter-label">'+key+':</label>\n<br>\n'+
        '<div class="indent">'+
        '<select id="'+safe_key+'" multiple>\n';

      values.forEach(function(val){
        html_string += '<option value="'+val+'" selected>'+val+'</option>\n';
      });

      html_string += (
        '</select>\n<br>\n'+
          '<a class="select_all" href="" id="'+safe_key+'_select_all">Select All</a> / '+
          '<a class="select_none" href="" id="'+safe_key+'_select_none">Select None</a>'+
        '</div>'+
        '</div>\n'
      );

      $("#filters").append(html_string);

    },

    generate_boolean_menu_item : function(key, safe_key, values){
      var html_string = '<div class="filter-form-item">\n'+
        '<label for="'+safe_key+'"  class="filter-label">'+key+':</label>\n<br>\n'+
        '<div class="indent">'+
          '<select id="'+safe_key+'">\n'+
            '<option value="Included" selected>Included</option>\n'+
            '<option value="Excluded">Excluded</option>\n'+
            '<option value="Only">Only</option>\n'+
          '</select>\n<br>\n'+
          '<label for="'+safe_key+'_include_nulls">Include Nulls:</label>\n'+
          '<input type="checkbox" id="'+safe_key+'_include_nulls" checked>'+
        '</div>'+
      '</div>\n';

      $("#filters").append(html_string);
    },

    generate_numeric_menu_item : function(key, safe_key, values){
      var html_string = '<div class="filter-form-item">\n'+
        '<p class="filter-label">'+key+':<p>'+
        '<div class="indent">'+
          '<label for="'+safe_key+'_min">Min:</label>\n'+
          '<input type="number" id="'+safe_key+'_min" min="'+values[0]+'" max="'+values[1]+'" value="'+values[0]+'" step="any">\n'+
          '<label for="'+safe_key+'_max">Max:</label>\n'+
          '<input type="number" id="'+safe_key+'_max" min="'+values[0]+'" max="'+values[1]+'" value="'+values[1]+'" step="any">\n<br>'+
          '<label for="'+safe_key+'_include_nulls">Include Nulls:</label>\n'+
          '<input type="checkbox" id="'+safe_key+'_include_nulls" checked>'+
        '</div>'+
      '</div>\n';

      $("#filters").append(html_string);
    },

    update_filter_hash : function(){
      for (var key in this.filter){
        if (this.filter_types[key] == "string"){
          this.filter[key] = $("#"+key).val();
        } else if (this.filter_types[key] == "boolean"){
          this.filter[key] = $("#"+key).val();
        } else if (this.filter_types[key] == "number"){
          this.filter[key] = [$("#"+key+"_min").val(),$("#"+key+"_max").val()];
        }
      }
    },

    filter_data : function(){
      var filtered_data = {"STUDENTS":[]};

      var filter = this.filter;
      var filter_types = this.filter_types;

      this.update_filter_hash();

      this.data["STUDENTS"].forEach(function(student){
        var demographics = student["DEMOGRAPHICS"];
        var push = true;

        for (var key in demographics){
          var safe_key = css_safe(key);

          if (filter_types[safe_key] == "string"){
            if ($("#"+safe_key).val().indexOf(demographics[key]) == -1)
              push = false;

          } else if (filter_types[safe_key] == "boolean"){
            if ($("#"+safe_key).val() == "Only" && demographics[key] == false)
              push = false;

            if ($("#"+safe_key).val() == "Excluded" && demographics[key] == true)
              push = false;

            if ($("#"+safe_key+"_include_nulls").prop('checked') == false && demographics[key] == "Not Specified")
              push = false;

          } else if (filter_types[safe_key] == "number"){
            if (demographics[key] != "Not Specified" && parseFloat($("#"+safe_key+"_min").val()) > parseFloat(demographics[key])){
              push = false;
            }


            if (demographics[key] != "Not Specified" && parseFloat($("#"+safe_key+"_max").val()) < parseFloat(demographics[key])){
              push = false;
            }

            if ($("#"+safe_key+"_include_nulls").prop('checked') == false && demographics[key] == "Not Specified")
              push = false;
          }
        }

        if (push)
          filtered_data["STUDENTS"].push(student);

      });

      return filtered_data;
    },

    update_time_selectors: function(time_1){
      var times_for_starting_group = [];
      this.data["STUDENTS"].forEach(function(student){
        var start_time = student["RECORDS"][0]["TIME"];
        if (start_time == time_1){
          student["RECORDS"].forEach(function(r,index){
            if (index != 0 && times_for_starting_group.indexOf(r["TIME"]) == -1)
              times_for_starting_group.push(r["TIME"]);
          });
        }
      });

      $("#time_2_select").html("");
      times_for_starting_group.forEach(function(t, index){
        $("#time_2_select").append('<option value="'+t+'" '+(index == (times_for_starting_group.length-1) ? 'selected' : '')+'>'+t+'</option>');
      });

      //$('#time_2_select').select2({ width: 'resolve' });
    },

    build_time_selectors: function(){
      var start_times = [];
      outside_data = this.data;
      this.data["STUDENTS"].forEach(function(student){
        var start_time = student["RECORDS"][0]["TIME"];
        if (start_times.indexOf(start_time) == -1)
          start_times.push(start_time);
      });

      //Creates the time_1 selector and selects the first time in the list (not guaranteed to be earliest
      $("#time_1_select").html("");
      start_times.forEach(function(t, index){
        $("#time_1_select").append('<option value="'+t+'" '+(index == 0 ? 'selected' : '')+'>'+t+'</option>');
      });

      this.update_time_selectors(start_times[0]);
    },
  }
