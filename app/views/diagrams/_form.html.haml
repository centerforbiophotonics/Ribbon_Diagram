= form_for @diagram do |f|
  - if @diagram.errors.any?
    #error_explanation
      %h2= "#{pluralize(@diagram.errors.count, "error")} prohibited this diagram from being saved:"
      %ul
        - @diagram.errors.full_messages.each do |msg|
          %li= msg

  .indent
    .field
      = f.label :name, "Name: "
      = f.text_field :name

    .field
      = f.label :category, "Category: "
      = f.text_field :category

    .field
      = f.label :description, "Description: "
      = f.text_area :description

  - if params[:action] == "edit"
    %h3 Replace Data Files (if left blank existing file will be kept):
  - elsif params[:action] == "new"
    %h3 Upload Data Files):
  .indent
    .field
      = f.label :data_format, "Data Format: "
      = f.select :data_format, options_for_select(["json", "csv"], :selected => @diagram.data_format || "json")

      = link_to "Format Description", {}, :id => "format_description_link"
    .field
      = f.fields_for :data_files do |builder|
        = render "data_file_form", :f => builder

  %h3 Sharing and Permissions:
  .indent
    .field
      = f.label :downloadable, "Allow users to download data file: "
      = f.check_box :downloadable

    .field
      = label_tag :user_diagrams, "Share With:"
      - source_for_users = (params[:action] == "new" ? current_user : @diagram)
      = select_tag :user_diagrams,
          options_for_select(source_for_users.institution.users.select{|u| u != current_user}.map{|u| [u.name, u.id  ]},
                              :selected => @diagram.users.map(&:id)),
          {:multiple => true}

  .actions
    = f.submit 'Save', :id => "diagram_submit"

:javascript
  //TODO: Hide second file field and set labels according to data_format.  Show second file field and change labels when data_format is changed.\
  window.onload = function(){
    var format_description_links = {
      "json": "#{asset_path("json_format.pdf")}",
      "csv": "#{asset_path("csv_format.pdf")}"
    };
    
    $("#diagram_data_format").change(function(){
      var format = $(this).val();

      $("#format_description_link").attr("href", format_description_links[format]);
      $("#diagram_data_files_attributes_1_data_file").val("");
      $("#diagram_data_files_attributes_0_data_file").val("");

      if (format === "json") {
        $("label[for='diagram_data_files_attributes_0_data_file']").text("Data File: ");
        $("#file_field_1").hide();

        $("#diagram_data_files_attributes_0_name").val("data");
        $("#diagram_data_files_attributes_1_name").val("");

      } else if (format === "csv"){
        $("label[for='diagram_data_files_attributes_0_data_file']").text("Record File: ");
        $("label[for='diagram_data_files_attributes_1_data_file']").text("Demographic File (Optional): ");
        $("#file_field_1").show();

        $("#diagram_data_files_attributes_0_name").val("records");
        $("#diagram_data_files_attributes_1_name").val("demographics");
      }
    });

    $("#diagram_data_format").change();

    $("#diagram_submit").click(function(e){
      var format = $("#diagram_data_format").val();
      var action = #{params[:action].inspect};
      if (action != "edit"){
        if (format === "json" && $("#diagram_data_files_attributes_0_data_file").val() === "") {
          alert("You must choose a file.");
          return false;
        } else if (format === "csv" && $("#diagram_data_files_attributes_0_data_file").val() === ""){
          alert("A records file is required to create a diagram.");
          e.preventDefault();
          return false;
        }
      }



    });
  }